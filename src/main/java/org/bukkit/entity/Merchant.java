package org.bukkit.entity;

import java.util.List;

import org.bukkit.inventory.MerchantTrade;

/**
 * Represents an entity that can provide Trade offers (eg. Villager).
 */
public interface Merchant {

    /**
     * Determine if this Merchant has traded with a {@link HumanEntity} before.
     * Trade offers are generated normally only at the time this Merchant is
     * making it's first trade; however, a Merchant may have a preexisting
     * List of {@link MerchantTrade}s generated by other sources (like Plugins).
     * @return true if this Merchant has traded before.
     */
    public boolean hasTradedBefore();

    /**
     * Set the currently trading HumanEntity of this Merchant.
     * @param human the {@link HumanEntity} that is trading with this Merchant.
     */
    public void setTradingHuman(HumanEntity human);

    /**
     * Retrieve the HumanEntity currently trading with this Merchant.
     * <p>
     * This will return null if the Merchant is not trading with any
     * HumanEntity.
     * @return the {@link HumanEntity} currently trading with this Merchant.
     */
    public HumanEntity getTradingHuman();

    /**
     * Determine if this Merchant is currently trading with a HumanEntity.
     *
     * @return whether this Merchant is actively trading.
     */
    public boolean isTrading();

    /**
     * This will construct a list of current {@link MerchantTrade}s that this
     * Merchant can offer a HumanEntity.
     * <p>
     * The returned list is unmodifiable!
     * @return an unmodifiable List of {@link MerchantTrade}s this Merchant can
     *      offer a HumanEntity.
     */
    public List<MerchantTrade> getOffers();

    /**
     * This will attempt to add a {@link MerchantTrade} that this Merchant can
     * offer a HumanEntity.
     *
     * @param merchantTrade trade that this Merchant is to add for offering.
     */
    public void addOffer(MerchantTrade merchantTrade);

    /**
     * Removes the specified {@link MerchantTrade} from this Merchant's list.
     * Any active trades are not affected unless the HumanEntity exits the
     * active trade gui.
     * @param merchantTrade trade that this Merchant needs to remove.
     * @return true if the {@link MerchantTrade} was in this Merchant's trade
     *      offer list to begin with and successfully removed
     */
    public boolean removeOffer(MerchantTrade merchantTrade);

}
